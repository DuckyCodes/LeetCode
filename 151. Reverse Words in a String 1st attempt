// Example program
#include <iostream>
#include <string>
using namespace std;

string reverseWords(string s) {
        string reverseS = "";
        string tempWord = "";
        string tempWordR = "";

        for (int i = s.length() - 1; i >= 0; i--) {
            if (s[i] == ' ') {
                continue;
            }
            while (i >= 0 && s[i] != ' ') { // separates each word
                tempWordR += s[i];
                i--;
            }

            for (int j = tempWordR.length() - 1; j >= 0;
                 j--) { // turn the word normal
                tempWord += tempWordR[j];
            }

            reverseS += tempWord;
            reverseS += ' ';

            tempWord = "";
            tempWordR = "";
        }
        if (!reverseS.empty())
            reverseS.pop_back();
        
        return reverseS;
    }


int main()
{
  string s = "the sky is blue"; //"blue is sky the"
  cout<<reverseWords(s)<<endl;
  
  s = "  hello world  ";
  cout<<reverseWords(s)<<endl;
  
  s = "a good   example";
  cout<<reverseWords(s)<<endl;
  
}
/*
Intuition:
        The goal of this problem is to reverse the order of the words in a sentence. For example "Hello World" -> "World Hello"
To do this problem, we need to store a word in a temporary array, then postition that word to the front of the string. 
        
Approach:
        1. Have a for loop that goes through each character in the array
        2. Find a word to put into the temporary string
        3. Add that string to the new sentence

Complexity
        Time Complexity:
                O(n) where n is the size of the sentence, since the for loop iterates through each character and the nested loops inside won't multiply. 
        Space Complexity:
                O(n) where n is the size of the sentence.

*/
